datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ApiKey    ApiKey[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ApiKey {
  id               String   @id @default(uuid())
  key              String   @unique
  name             String
  isActive         Boolean  @default(true)
  allowedOrigins   String   @default("*")
  rateLimitWindow  Int      @default(60)
  rateLimitCount   Int      @default(30)
  dailyLimit       Int?
  monthlyLimit     Int?
  maxCalls         Int?
  maxVideosPerCall Int?     @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  usage            Usage[]
  user             User?    @relation(fields: [userId], references: [id])
  userId           String?
}

model Usage {
  id        String   @id @default(uuid())
  apiKeyId  String
  apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])
  endpoint  String
  timestamp DateTime @default(now())
  status    String
  details   Json?
}

model Video {
  id          String       @id @unique
  title       String
  author      String
  duration    Int
  thumbnail   String?
  description String?
  channelId   String
  channelName String
  tags        String[]
  likes       Int
  category    String
  views       Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  transcripts Transcript[]
}

model Transcript {
  id        String   @id @default(uuid())
  videoId   String   @unique
  video     Video    @relation(fields: [videoId], references: [id])
  segments  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
